// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ========================================
// Phase 1: Core Authentication System
// Database: PostgreSQL with Prisma
// Created: 2025-09-07
// Description: Users, privacy settings, refresh tokens, password resets
// ========================================

// Enums
enum UserRole {
  user
  admin
}

enum PrivacyOption {
  everyone
  followers
  nobody
}

// Core Users Table
model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  passwordHash String    @map("password_hash") @db.VarChar(255)
  fullName     String?   @map("full_name") @db.VarChar(100)
  bio          String?   @db.Text
  avatarUrl    String?   @map("avatar_url") @db.VarChar(255)
  role         UserRole  @default(user)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastSeen     DateTime? @map("last_seen")
  isOnline     Boolean   @default(false) @map("is_online")

  // Relations (Phase 1 only)
  privacySettings UserPrivacySetting?
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]

  // Indexes for authentication and core user operations
  @@index([username]) // Login by username
  @@index([email])    // Login by email, find by email
  @@index([role])     // Admin/user filtering
  @@index([isOnline]) // Online status queries
  @@index([createdAt]) // User registration analytics
  @@index([lastSeen])  // Activity tracking
  @@map("users")
}

//otp verify
model OtpVerification {
  id        Int      @id @default(autoincrement())
  phone     String?  @db.VarChar(15)
  email     String   @db.VarChar(100)
  otp       String   @db.VarChar(10)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([otp])
  @@index([expiresAt])
  @@map("otp_verifications")
}

// User Privacy Settings (1:1 relationship)
model UserPrivacySetting {
  userId              Int           @id @map("user_id")
  whoCanMessage       PrivacyOption @default(everyone) @map("who_can_message")
  whoCanTagMe         PrivacyOption @default(everyone) @map("who_can_tag_me")
  whoCanFindByEmail   Boolean       @default(true) @map("who_can_find_by_email")
  showOnlineStatus    Boolean       @default(true) @map("show_online_status")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([whoCanMessage])
  @@index([whoCanTagMe])
  @@index([whoCanFindByEmail])
  @@index([showOnlineStatus])
  @@map("user_privacy_settings")
}

// Refresh Tokens for JWT authentication
model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  refreshToken String   @map("refresh_token") @db.VarChar(255)
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  revoked      Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([revoked])
  @@index([userId, revoked]) // Composite index cho query active tokens cá»§a user
  @@map("refresh_tokens")
}

// Password Reset Tokens
model PasswordReset {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  resetToken String   @map("reset_token") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([resetToken])
  @@index([expiresAt])
  @@index([used])
  @@index([resetToken, used, expiresAt]) // Composite index cho validation
  @@map("password_resets")
}