// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Phase 1: Core Authentication System
// Database: PostgreSQL with Prisma
// Created: 2025-09-07
// Description: Users, privacy settings, refresh tokens, password resets
// ========================================

enum UserRole {
  user
  admin
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum PrivacyOption {
  everyone
  followers
  nobody
}

enum TargetType {
  POST
  COMMENT
  STORY
  MESSAGE
  REEL
}

enum NotificationType {
  // Follow related
  FOLLOW
  FOLLOW_REQUEST
  FOLLOW_ACCEPTED
  FOLLOW_REJECTED

  // Interaction on posts/comments
  COMMENT // Bạn được comment
  REPLY // Comment của bạn được reply
  MENTION // Bạn được mention
  REACTION // Bạn được like/emoji react
  REPOST // Bạn được repost

  // Direct messaging
  MESSAGE // Tin nhắn mới
}

enum NotificationTargetType {
  POST
  COMMENT
  USER
  MESSAGE
  CONVERSATION
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String?   @unique @db.VarChar(100)
  passwordHash String?   @map("password_hash") @db.VarChar(255)
  fullName     String?   @map("full_name") @db.VarChar(100)
  avatarUrl    String?   @map("avatar_url") @db.VarChar(255)
  role         UserRole  @default(user)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastSeen     DateTime? @map("last_seen")
  isOnline     Boolean   @default(false) @map("is_online")
  facebookId   String?   @unique @map("facebook_id")
  provider     String?   @default("email") @db.VarChar(50)

  // Relations (Phase 1 only)
  privacySettings         UserPrivacySetting?
  passwordResets          PasswordReset[]
  posts                   Post[]
  comments                Comment[]
  reactions               Reaction[]
  mentions                Mention[]
  reposts                 Repost[]
  saved_posts             SavedPost[]
  sentNotifications       Notification[]       @relation("ActorNotifications")
  receivedNotifications   Notification[]       @relation("UserNotifications")
  following               Follow[]             @relation("Following") // user này follow người khác
  followers               Follow[]             @relation("Followers") // user này được người khác follow
  followRequestsSent      FollowRequest[]      @relation("FollowRequestsSent")
  followRequestsReceived  FollowRequest[]      @relation("FollowRequestsReceived")
  // Chat relations
  sentMessages            Message[]            @relation("ChatMessagesSent")
  chatMessageStates       MessageState[]       @relation("ChatMessageStates")
  chatMessageReactions    MessageReaction[]    @relation("ChatMessageReactions")
  conversationMemberships ConversationMember[] @relation("UserConversationMembers")
  messageEditHistory      MessageEditHistory[] @relation("MessageEditHistory")
  conversationsCreated    Conversation[]       @relation("ConversationCreator")
  pinnedMessages          PinnedMessage[]

  // Indexes for authentication and core user operations
  @@index([role]) // Admin/user filtering
  @@index([isOnline]) // Online status queries
  @@index([createdAt]) // User registration analytics
  @@index([lastSeen]) // Activity tracking
  @@map("users")
}

model OtpVerification {
  id        Int      @id @default(autoincrement())
  phone     String?  @db.VarChar(15)
  email     String   @db.VarChar(100)
  otp       String   @db.VarChar(10)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([otp])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model UserPrivacySetting {
  userId               Int           @id @map("user_id")
  isPrivate            Boolean       @default(false) @map("is_private")
  whoCanMessage        PrivacyOption @default(everyone) @map("who_can_message")
  whoCanTagMe          PrivacyOption @default(everyone) @map("who_can_tag_me")
  whoCanFindByUsername Boolean       @default(true) @map("who_can_find_by_username")
  showOnlineStatus     Boolean       @default(true) @map("show_online_status")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime      @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([isPrivate])
  @@index([whoCanMessage])
  @@index([whoCanTagMe])
  @@index([whoCanFindByUsername])
  @@index([showOnlineStatus])
  @@map("user_privacy_settings")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  resetToken String   @map("reset_token") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([resetToken])
  @@index([expiresAt])
  @@index([used])
  @@index([resetToken, used, expiresAt]) // Composite index cho validation
  @@map("password_resets")
}

model Post {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  content       String?   @db.Text
  whoCanSee     String    @default("public")
  whoCanComment String    @default("everyone")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  // Relations
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  media      PostMedia[]
  hashtags   PostHashtag[]
  mentions   Mention[]
  comments   Comment[]
  reposts    Repost[]
  savedPosts SavedPost[]

  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("posts")
}

model PostMedia {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  mediaUrl  String   @map("media_url") @db.VarChar(500)
  mediaType String   @default("image") @map("media_type") @db.VarChar(50) // image, video, gif
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([postId])
  @@index([mediaType])
  @@map("post_media")
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  posts PostHashtag[]

  @@map("hashtags")
}

model PostHashtag {
  postId    Int @map("post_id")
  hashtagId Int @map("hashtag_id")

  // Relations
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([postId, hashtagId])
  @@map("post_hashtags")
}

model Comment {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  parentId  Int?      @map("parent_id") // Cho nested comments
  content   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  mentions Mention[]

  // Thêm composite index cho nested comments
  @@index([postId, parentId]) // Query replies nhanh hơn
  @@index([postId, createdAt]) // Phân trang comments
  // Indexes
  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comments")
}

model Reaction {
  id           Int        @id @default(autoincrement())
  userId       Int        @map("user_id")
  targetType   TargetType @map("target_type")
  targetId     Int        @map("target_id")
  reactionType String     @map("reaction_type") // "like", "love", "fire", "super_love"
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionConfig ReactionConfig @relation(fields: [reactionType], references: [type])

  // Unique constraint: một user chỉ react 1 lần cho 1 target
  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
  @@index([reactionType])
  @@index([createdAt])
  @@map("reactions")
}

model ReactionSummary {
  id           Int        @id @default(autoincrement())
  targetType   TargetType @map("target_type")
  targetId     Int        @map("target_id")
  reactionType String     @map("reaction_type")
  count        Int        @default(0)
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relation to config
  reactionConfig ReactionConfig @relation(fields: [reactionType], references: [type])

  @@unique([targetType, targetId, reactionType])
  @@index([targetType, targetId])
  @@map("reaction_summaries")
}

model ReactionConfig {
  id        Int      @id @default(autoincrement())
  type      String   @unique // "like", "love", "fire", "super_love"
  name      String // "Like", "Love", "Fire", "Super Love"
  emoji     String // "👍", "❤️", "🔥", "😍"
  color     String? // "#007AFF", "#FF3B30"
  isActive  Boolean  @default(true) @map("is_active")
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  reactions         Reaction[]        @relation
  reactionSummaries ReactionSummary[] @relation
  notifications     Notification[]

  @@map("reaction_configs")
}

model Mention {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id") // Người được mention
  postId    Int?     @map("post_id") // Post chứa mention (nullable)
  commentId Int?     @map("comment_id") // Comment chứa mention (nullable)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Constraint: mention phải thuộc post hoặc comment
  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@map("mentions")
}

model Repost {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  postId    Int       @map("post_id")
  content   String?   @db.Text // Comment khi repost
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Unique constraint: một user chỉ repost 1 lần cho 1 post
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt])
  @@map("reposts")
}

model SavedPost {
  userId  Int      @map("user_id")
  postId  Int      @map("post_id")
  savedAt DateTime @default(now()) @map("saved_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Composite primary key
  @@id([userId, postId])
  @@index([userId])
  @@index([savedAt])
  @@map("saved_posts")
}

model Notification {
  id         Int                    @id @default(autoincrement())
  userId     Int                    @map("user_id") // Người nhận notification
  actorId    Int                    @map("actor_id") // Người thực hiện action
  type       NotificationType
  targetType NotificationTargetType @map("target_type")
  targetId   Int?                   @map("target_id")
  isRead     Boolean                @default(false) @map("is_read")
  createdAt  DateTime               @default(now()) @map("created_at")
  updatedAt  DateTime               @default(now()) @map("updated_at")
  reactionId Int?                   @map("reaction_id")

  // Relations
  user     User            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor    User            @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  reaction ReactionConfig? @relation(fields: [reactionId], references: [id], onDelete: SetNull)

  metadata Json? // Dữ liệu bổ sung

  // Unique constraints
  // Gom theo type nếu không có targetId
  @@unique([userId, type, targetType], map: "unique_by_type")
  // Gom theo target nếu có targetId
  @@unique([userId, type, targetType, targetId], map: "unique_by_target")
  // Indexes
  @@index([userId])
  @@index([actorId])
  @@index([type])
  @@index([targetType, targetId])
  @@index([isRead])
  @@index([createdAt])
  // Composite indexes
  @@index([userId, isRead]) // Query unread notifications
  @@index([userId, createdAt]) // Query timeline
  @@map("notifications")
}

model Follow {
  followerId  Int      @map("follower_id") // id của người đi follow
  followingId Int      @map("following_id") // id của người bị follow
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // composite primary key
  @@index([followingId, createdAt]) // Lấy danh sách followers
  @@index([followerId, createdAt]) // Lấy danh sách following
  @@map("follows")
}

model FollowRequest {
  id         Int  @id @default(autoincrement())
  fromUserId Int
  fromUser   User @relation("FollowRequestsSent", fields: [fromUserId], references: [id])

  toUserId Int
  toUser   User @relation("FollowRequestsReceived", fields: [toUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromUserId, toUserId]) // 1 user chỉ gửi 1 request cho 1 user
  @@index([toUserId]) // tăng tốc query lấy request pending cho 1 user
  @@map("follow_requests")
}

// ================== ENUMS ==================
enum ConversationType {
  DIRECT // Chat 1-1
  GROUP // Chat nhóm
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  POST_SHARE
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
}

enum MemberRole {
  ADMIN
  MEMBER
}

// Bảng Conversation - Lưu các cuộc trò chuyện
model Conversation {
  id            Int              @id @default(autoincrement())
  type          ConversationType @default(DIRECT)
  name          String?          @db.VarChar(100) // Tên nhóm (nullable cho direct chat)
  avatarUrl     String?          @map("avatar_url") @db.VarChar(255) // Avatar nhóm
  createdBy     Int?             @map("created_by") // User tạo nhóm
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  lastMessageAt DateTime?        @map("last_message_at") // Thời gian tin nhắn cuối

  // Relations
  creator        User?                @relation("ConversationCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  members        ConversationMember[]
  messages       Message[]
  pinnedMessages PinnedMessage[]

  // Indexes
  @@index([type])
  @@index([lastMessageAt])
  @@index([createdBy])
  @@map("conversations")
}

// Bảng ConversationMember - Thành viên trong conversation
model ConversationMember {
  id             Int        @id @default(autoincrement())
  conversationId Int        @map("conversation_id")
  userId         Int        @map("user_id")
  role           MemberRole @default(MEMBER)
  joinedAt       DateTime   @default(now()) @map("joined_at")
  leftAt         DateTime?  @map("left_at")
  lastReadAt     DateTime?  @map("last_read_at") // Thời gian đọc tin nhắn cuối
  isMuted        Boolean    @default(false) @map("is_muted") // Tắt thông báo
  isPinned       Boolean    @default(false) @map("is_pinned") // Ghim hội thoại

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation("UserConversationMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
  @@index([lastReadAt])
  @@index([isPinned])
  @@index([userId, isPinned, lastReadAt])
  @@index([conversationId, leftAt])
  @@map("conversation_members")
}

// Bảng Message - Tin nhắn
model Message {
  id             Int         @id @default(autoincrement())
  conversationId Int         @map("conversation_id")
  senderId       Int?        @map("sender_id") // null nếu là tin nhắn hệ thống
  type           MessageType @default(TEXT)
  content        String?     @db.Text
  mediaUrl       String?     @map("media_url") @db.VarChar(500)
  replyToId      Int?        @map("reply_to_id")
  isRecalled     Boolean     @default(false) @map("is_recalled")
  recalledAt     DateTime?   @map("recalled_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  deletedAt      DateTime?   @map("deleted_at")
  isSystem       Boolean     @default(false) @map("is_system")

  // Relations
  conversation Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User?                @relation("ChatMessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo      Message?             @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies      Message[]            @relation("MessageReplies")
  states       MessageState[]       @relation("ChatMessageStates")
  reactions    MessageReaction[]    @relation("ChatMessageReactions")
  pinnedIn     PinnedMessage[]
  editHistory  MessageEditHistory[]

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([replyToId])
  @@index([deletedAt])
  @@index([type])
  @@index([conversationId, deletedAt])
  @@index([conversationId, isSystem])
  @@map("messages")
}


// Bảng MessageState - Trạng thái tin nhắn (đã gửi, đã nhận, đã đọc)
model MessageState {
  id        Int            @id @default(autoincrement())
  messageId Int            @map("message_id")
  userId    Int            @map("user_id")
  status    DeliveryStatus @default(SENT)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  // Relations
  message Message @relation("ChatMessageStates", fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("ChatMessageStates", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@index([status])
  @@map("message_states")
}

// Bảng MessageEditHistory - Lịch sử chỉnh sửa tin nhắn
model MessageEditHistory {
  id         Int      @id @default(autoincrement())
  messageId  Int      @map("message_id")
  oldContent String?  @map("old_content") @db.Text
  newContent String   @map("new_content") @db.Text
  editedBy   Int      @map("edited_by")
  editedAt   DateTime @default(now()) @map("edited_at")

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  editor  User    @relation("MessageEditHistory", fields: [editedBy], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([editedBy])
  @@index([editedAt])
  @@map("message_edit_history")
}

// Bảng MessageReaction - React tin nhắn (emoji)
model MessageReaction {
  id        Int      @id @default(autoincrement())
  messageId Int      @map("message_id")
  userId    Int      @map("user_id")
  emoji     String   @db.VarChar(10)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  message Message @relation("ChatMessageReactions", fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("ChatMessageReactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_reactions")
}

// Bảng PinnedMessage - Tin nhắn được ghim
model PinnedMessage {
  id             Int      @id @default(autoincrement())
  conversationId Int      @map("conversation_id")
  messageId      Int      @map("message_id")
  pinnedById     Int      @map("pinned_by_id")
  pinnedAt       DateTime @default(now()) @map("pinned_at")

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message      Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  pinnedBy     User         @relation(fields: [pinnedById], references: [id], onDelete: Cascade)

  @@unique([conversationId, messageId])
  @@index([conversationId, pinnedAt])
  @@index([pinnedById])
  @@map("pinned_messages")
}

model TypingIndicator {
  conversationId Int
  userId         Int
  startedAt      DateTime
  expiresAt      DateTime

  @@unique([conversationId, userId])
}
