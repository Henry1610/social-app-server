// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// ========================================
// Phase 1: Core Authentication System
// Database: PostgreSQL with Prisma
// Created: 2025-09-07
// Description: Users, privacy settings, refresh tokens, password resets
// ========================================

enum UserRole {
  user
  admin
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}

enum PrivacyOption {
  everyone
  followers
  nobody
}

enum TargetType {
  POST
  COMMENT
  STORY
  MESSAGE
  REEL
}

enum NotificationType {
  COMMENT
  FOLLOW
  MENTION
  REPOST
  REPLY
  FOLLOW_REQUEST
  FOLLOW_ACCEPTED
  FOLLOW_REJECTED
  REACTION
}

enum NotificationTargetType {
  POST
  COMMENT
  USER
  STORY
  MESSAGE
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  email        String?    @unique @db.VarChar(100)
  passwordHash String?    @map("password_hash") @db.VarChar(255)
  fullName     String?   @map("full_name") @db.VarChar(100)
  bio          String?   @db.Text
  avatarUrl    String?   @map("avatar_url") @db.VarChar(255)
  role         UserRole  @default(user)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastSeen     DateTime? @map("last_seen")
  isOnline     Boolean   @default(false) @map("is_online")
  facebookId   String?   @unique @map("facebook_id")
  provider     String?   @default("email") @db.VarChar(50)
  gender       String?   @db.VarChar(10) // male, female, other
  birthday     DateTime? // Ngày sinh (có thể null)

  // Relations (Phase 1 only)
  privacySettings UserPrivacySetting?
  refreshTokens   RefreshToken[]
  passwordResets  PasswordReset[]
  posts       Post[]
  comments    Comment[]
  reactions   Reaction[]
  mentions    Mention[]
  reposts     Repost[]
  saved_posts SavedPost[]
  sentNotifications     Notification[] @relation("ActorNotifications")
  receivedNotifications Notification[] @relation("UserNotifications")
  following Follow[] @relation("Following") // user này follow người khác
  followers Follow[] @relation("Followers") // user này được người khác follow
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")

  // Indexes for authentication and core user operations
  @@index([username]) // Login by username
  @@index([email])    // Login by email, find by email
  @@index([role])     // Admin/user filtering
  @@index([isOnline]) // Online status queries
  @@index([createdAt]) // User registration analytics
  @@index([lastSeen])  // Activity tracking
  @@map("users")
}

model OtpVerification {
  id        Int      @id @default(autoincrement())
  phone     String?  @db.VarChar(15)
  email     String   @db.VarChar(100)
  otp       String   @db.VarChar(10)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([otp])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model UserPrivacySetting {
  userId              Int           @id @map("user_id")
  isPrivate           Boolean       @default(false) @map("is_private")
  whoCanMessage       PrivacyOption @default(everyone) @map("who_can_message")
  whoCanTagMe         PrivacyOption @default(everyone) @map("who_can_tag_me")
  whoCanFindByUsername   Boolean       @default(true) @map("who_can_find_by_username")
  showOnlineStatus    Boolean       @default(true) @map("show_online_status")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([isPrivate])
  @@index([whoCanMessage])
  @@index([whoCanTagMe])  
  @@index([whoCanFindByUsername])
  @@index([showOnlineStatus])
  @@map("user_privacy_settings")
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  refreshToken String   @map("refresh_token") @db.VarChar(255) @unique
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  revoked      Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([revoked])
  @@index([userId, revoked]) // Composite index cho query active tokens của user
  @@map("refresh_tokens")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  resetToken String   @map("reset_token") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  used       Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([resetToken])
  @@index([expiresAt])
  @@index([used])
  @@index([resetToken, used, expiresAt]) // Composite index cho validation
  @@map("password_resets")
}

model Post {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  content    String?   @db.Text
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  // Relations
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  media             PostMedia[]
  privacySettings   PostPrivacySetting?
  hashtags          PostHashtag[]
  mentions          Mention[]
  comments          Comment[]
  reposts           Repost[]
  savedPosts        SavedPost[]
  
  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("posts")
}

model PostMedia {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  mediaUrl  String   @map("media_url") @db.VarChar(500)
  mediaType String   @map("media_type") @db.VarChar(50) @default("image") // image, video, gif
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([postId])
  @@index([mediaType])
  @@map("post_media")
}

model PostPrivacySetting {
  postId        Int    @id @map("post_id")
  whoCanSee     String @map("who_can_see") @db.VarChar(20) @default("public") // public, follower, only_me
  whoCanComment String @map("who_can_comment") @db.VarChar(20) @default("everyone") // everyone, follower, only_me

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([whoCanSee])
  @@index([whoCanComment])
  @@map("post_privacy_settings")
}

model Hashtag {
  id        Int           @id @default(autoincrement())
  name      String        @unique @db.VarChar(100)
  createdAt DateTime      @default(now()) @map("created_at")

  // Relations
  posts PostHashtag[]

  @@index([name])
  @@map("hashtags")
}

model PostHashtag {
  postId    Int @map("post_id")
  hashtagId Int @map("hashtag_id")

  // Relations
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([postId, hashtagId])
  @@map("post_hashtags")
}

model Comment {
  id        Int       @id @default(autoincrement())
  postId    Int       @map("post_id")
  userId    Int       @map("user_id")
  parentId  Int?      @map("parent_id") // Cho nested comments
  content   String    @db.Text
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  mentions Mention[]

  // Indexes
  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comments")
}

model Reaction {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  targetType TargetType     @map("target_type") 
  targetId   Int      @map("target_id")
  reactionType  String      @map("reaction_type") // "like", "love", "fire", "super_love"
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactionConfig ReactionConfig @relation(fields: [reactionType], references: [type])


  // Unique constraint: một user chỉ react 1 lần cho 1 target
  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
  @@index([userId])
  @@index([reactionType])
  @@index([createdAt])
  @@map("reactions")
}

model ReactionSummary {
  id         Int      @id @default(autoincrement())
  targetType    TargetType @map("target_type")
  targetId      Int     @map("target_id")
  reactionType  String     @map("reaction_type")
  count         Int        @default(0)
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relation to config
  reactionConfig ReactionConfig @relation(fields: [reactionType], references: [type])

  @@unique([targetType, targetId, reactionType])
  @@index([targetType, targetId])
  @@map("reaction_summaries")
}

model ReactionConfig {
  id         Int      @id @default(autoincrement())
  type        String   @unique // "like", "love", "fire", "super_love"
  name        String   // "Like", "Love", "Fire", "Super Love"
  emoji       String   // "👍", "❤️", "🔥", "😍"
  color       String?  // "#007AFF", "#FF3B30"
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  reactions        Reaction[]        @relation
  reactionSummaries ReactionSummary[] @relation
  notifications      Notification[]
  @@map("reaction_configs")
}

model Mention {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id") // Người được mention
  postId    Int?     @map("post_id") // Post chứa mention (nullable)
  commentId Int?     @map("comment_id") // Comment chứa mention (nullable)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Constraint: mention phải thuộc post hoặc comment
  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@map("mentions")
}

model Repost {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  postId    Int       @map("post_id")
  content   String?   @db.Text // Comment khi repost
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Unique constraint: một user chỉ repost 1 lần cho 1 post
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt])
  @@map("reposts")
}

model SavedPost {
  userId  Int      @map("user_id")
  postId  Int      @map("post_id")
  savedAt DateTime @default(now()) @map("saved_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Composite primary key
  @@id([userId, postId])
  @@index([userId])
  @@index([savedAt])
  @@map("saved_posts")
}

model Notification {
  id         Int                      @id @default(autoincrement())
  userId     Int                      @map("user_id")      // Người nhận notification
  actorId    Int                      @map("actor_id")     // Người thực hiện action
  type       NotificationType
  targetType NotificationTargetType   @map("target_type")
  targetId   Int                      @map("target_id")
  isRead     Boolean                  @default(false) @map("is_read")
  createdAt  DateTime                 @default(now()) @map("created_at")
  updatedAt  DateTime                 @default(now()) @map("updated_at")
  templateId Int?                     @map("template_id")
  reactionId Int?                     @map("reaction_id")

  // Relations
  user     User                  @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor    User                  @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  template NotificationTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  reaction ReactionConfig?       @relation(fields: [reactionId], references: [id], onDelete: SetNull)

  metadata Json?  // Dữ liệu bổ sung

  // Indexes
  @@index([userId])
  @@index([actorId])
  @@index([type])
  @@index([targetType, targetId])
  @@index([isRead])
  @@index([createdAt])

  // Composite indexes
  @@index([userId, isRead])       // Query unread notifications
  @@index([userId, createdAt])    // Query timeline

  // Unique constraints
  // 1 notification duy nhất cho Like hoặc Follow
  @@unique([userId, type, targetType, targetId], map: "unique_like_follow") 
  @@map("notifications")
}

model NotificationTemplate {
  id        Int                     @id @default(autoincrement())
  type      NotificationType        @unique
  targetType NotificationTargetType? 
  template  String                  // Template với placeholder: "{{actor_name}} đã thích {{target_type}} của bạn"
  isActive  Boolean                 @default(true) @map("is_active")
  createdAt DateTime                @default(now()) @map("created_at")
  updatedAt DateTime                @updatedAt @map("updated_at")

  // Relations
  notifications Notification[]

  // Indexes
  @@unique([type, targetType])
  @@index([type])
  @@index([isActive])
  @@map("notification_templates")
}

model Follow {
  followerId  Int   @map("follower_id")     // id của người đi follow
  followingId Int   @map("following_id")    // id của người bị follow
  createdAt   DateTime @default(now()) @map("created_at")

  follower User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])  // composite primary key
  @@map("follows")                 // tên bảng trong DB
}

model FollowRequest {
  id        Int   @id @default(autoincrement())
  fromUserId Int
  fromUser   User               @relation("FollowRequestsSent", fields: [fromUserId], references: [id])

  toUserId   Int
  toUser     User               @relation("FollowRequestsReceived", fields: [toUserId], references: [id])

  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([fromUserId, toUserId]) // 1 user chỉ gửi 1 request cho 1 user
  @@index([toUserId])      // tăng tốc query lấy request pending cho 1 user
  @@map("follow_requests")
}